apiVersion: v1
kind: Template
labels:
    template: blue-green-deployment-example
message: Example blue-green how strategies deployment by use the deployment-example
metadata:
    anotations:
        description: This example showcases a blue green deployment using deployment-example
        tags: blue-green, deployment-example
    name: blue-green-deployment-example
objects:
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      pipeline.alpha.openshift.io/uses: '[{"name": "example", "namespace": "", "kind": "DeploymentConfig"}]'
    creationTimestamp: null
    labels:
      name: blue-green-deployment-example
    name: blue-green-deployment-example
  spec:
    strategy:
      jenkinsPipelineStrategy:
        jenkinsfile: |-
          try {
             timeout(time: 20, unit: 'MINUTES') {
                def appName="dexample"
                def service="example"
                def project=""
                def tag="blue"
                def altTag="green"
                def verbose="flase"
        
                node {
                  project = env.PROJECT_NAME
                  stage("Initialize") {
                    sh "oc get route ${appName} -n ${project} -o jsonpath='{ .spec.to.name }' --loglevel=4 > activeservice"
                    activeService = readFile('activeservice').trim()
                    if (activeService == "${service}-blue") {
                      tag = "green"
                      altTag = "blue"
                    }
                    sh "oc get route ${tag}-${appName} -n ${project} -o jsonpath='{ .spec.host }' --loglevel=4 > routehost"
                    routeHost = readFile('routehost').trim()
                  }
        
                  stage("Build") {
                    echo "building tag ${tag}"
                    openshiftTag srcStream: 'blue-green-deployment-example', srcTag: 'latest', destinationStream: 'blue-green-deployment-example', destinationTag: tag, verbose: verbose
                    openshiftVerifyDeployment deploymentConfig: "${service}-${tag}", verbose: verbose
                  }
        
                        
                  stage("Test") {
                    input message: "Test deployment: http://${routeHost}. Approve?", id: "approval"
                  }
        
                  stage("Go Live") {
                    sh "oc set -n ${project} route-backends ${appName} ${service}-${tag}=100 ${service}-${altTag}=0 --loglevel=4"
                  }
                }
             }
          } catch (err) {
             echo "in catch block"
             echo "Caught: ${err}"
             currentBuild.result = 'FAILURE'
             throw err
          }          
      type: JenkinsPipeline
- apiVersion: v1
  kind: Service
  metadata:
    name: example-blue
  spec:
    ports:
    - port: 8080
      targetPort: 8080
    selector:
        deploymentconfig: example-blue
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: example-blue
  spec:
    replicas: 2
    selector: 
        deploymentconfig: example-blue
    strategy:
      type: Rolling      
    template:
      metadata:
        labels:
          deploymentconfig: example-blue
      spec:
        containers:
        - image: openshift/deployment-example:v1
          name: deployment-example
          ports:
          - containerPort: 8080
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1           
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - deployment-example
        from:
          kind: ImageStreamTag
          name: blue-green-deployment-example:blue
      type: ImageChange    
- apiVersion: v1
  kind: Service
  metadata:
    name: example-green
  spec:
    ports:
    - port: 8080
      targetPort: 8080
    selector:
        deploymentconfig: example-green
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: example-green
  spec:
    replicas: 2
    selector: 
        deploymentconfig: example-green
    strategy:
      type: Recreate  
          
    template:
      metadata:
        labels:
          deploymentconfig: example-green
      spec:
        containers:
        - image: openshift/deployment-example:v1
          name: deployment-example
          ports:
          - containerPort: 8080
            protocol: TCP  
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1             
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - deployment-example
        from:
          kind: ImageStreamTag
          name: blue-green-deployment-example:green
      type: ImageChange        
- apiVersion: v1
  kind: Route
  metadata:
    name: blue-dexample
  spec:
    to:
      kind: Service
      name: example-blue
- apiVersion: v1
  kind: Route
  metadata:
    name: green-dexample
  spec:
    to:
      kind: Service
      name: example-green
- apiVersion: v1
  kind: Route
  metadata:
    name: dexample
  spec:
    alternateBackends:
    - name: example-green  
      weight: 0
    to:
      kind: Service
      name: example-blue
      weight: 100
- apiVersion: v1
  kind: ImageStream
  metadata:
    name: blue-green-deployment-example
  spec:
    dockerImageRepository: openshift/deployment-example
